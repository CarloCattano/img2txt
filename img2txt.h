#ifndef IMG2TXT_H
#define IMG2TXT_H

#include <math.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/ioctl.h>
#include <unistd.h>

#include "stb_image.h"
#include "stb_image_resize2.h"

#define CLS "\033[2J\033[H"
#define RESET_COLOR "\033[0m"
#define DENSITY "@/\\O1?oc^-,'.        "
#define MAX_WIDTH 1500
#define ANSI_ESCAPE_SEQUENCE_MAX_LEN 13

// map 0 to 255 to 0 to 1
#define MAP(x, in_min, in_max, out_min, out_max)                               \
  ((x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min)

// --- Terminal Size ---
static inline int get_terminal_width() {
  struct winsize w;
  ioctl(STDOUT_FILENO, TIOCGWINSZ, &w);
  return w.ws_col;
}

// --- 8-Color Palette ---
const char *colors8[] = {
    "\033[0;30m", // Black
    "\033[0;31m", // Red
    "\033[0;32m", // Green
    "\033[0;33m", // Yellow
    "\033[0;34m", // Blue
    "\033[0;35m", // Magenta
    "\033[0;36m", // Cyan
    "\033[0;37m", // White
};
const int num_colors8 = sizeof(colors8) / sizeof(colors8[0]);

const unsigned char color_palette8[][3] = {
    {0, 0, 0},       // Black
    {255, 0, 0},     // Red
    {0, 255, 0},     // Green
    {255, 255, 0},   // Yellow
    {0, 0, 255},     // Blue
    {255, 0, 255},   // Magenta
    {0, 255, 255},   // Cyan
    {255, 255, 255}, // White
};

static inline int get_closest_color8(int r, int g, int b) {
  int min_dist = 1000000;
  int best_color = 0;
  for (int i = 0; i < num_colors8; i++) {
    int dr = r - color_palette8[i][0];
    int dg = g - color_palette8[i][1];
    int db = b - color_palette8[i][2];
    int dist = dr * dr + dg * dg + db * db;
    if (dist < min_dist) {
      min_dist = dist;
      best_color = i;
    }
  }
  return best_color;
}

// --- 256-Color Palette ---
const unsigned char xterm_colors[][3] = {
    {0, 0, 0},       {128, 0, 0},     {0, 128, 0},     {128, 128, 0},
    {0, 0, 128},     {128, 0, 128},   {0, 128, 128},   {192, 192, 192},
    {128, 128, 128}, {255, 0, 0},     {0, 255, 0},     {255, 255, 0},
    {0, 0, 255},     {255, 0, 255},   {0, 255, 255},   {255, 255, 255},
    {0, 0, 0},       {0, 0, 95},      {0, 0, 135},     {0, 0, 175},
    {0, 0, 215},     {0, 0, 255},     {0, 95, 0},      {0, 95, 95},
    {0, 95, 135},    {0, 95, 175},    {0, 95, 215},    {0, 95, 255},
    {0, 135, 0},     {0, 135, 95},    {0, 135, 135},   {0, 135, 175},
    {0, 135, 215},   {0, 135, 255},   {0, 175, 0},     {0, 175, 95},
    {0, 175, 135},   {0, 175, 175},   {0, 175, 215},   {0, 175, 255},
    {0, 215, 0},     {0, 215, 95},    {0, 215, 135},   {0, 215, 175},
    {0, 215, 215},   {0, 215, 255},   {0, 255, 0},     {0, 255, 95},
    {0, 255, 135},   {0, 255, 175},   {0, 255, 215},   {0, 255, 255},
    {95, 0, 0},      {95, 0, 95},     {95, 0, 135},    {95, 0, 175},
    {95, 0, 215},    {95, 0, 255},    {95, 95, 0},     {95, 95, 95},
    {95, 95, 135},   {95, 95, 175},   {95, 95, 215},   {95, 95, 255},
    {95, 135, 0},    {95, 135, 95},   {95, 135, 135},  {95, 135, 175},
    {95, 135, 215},  {95, 135, 255},  {95, 175, 0},    {95, 175, 95},
    {95, 175, 135},  {95, 175, 175},  {95, 175, 215},  {95, 175, 255},
    {95, 215, 0},    {95, 215, 95},   {95, 215, 135},  {95, 215, 175},
    {95, 215, 215},  {95, 215, 255},  {95, 255, 0},    {95, 255, 95},
    {95, 255, 135},  {95, 255, 175},  {95, 255, 215},  {95, 255, 255},
    {135, 0, 0},     {135, 0, 95},    {135, 0, 135},   {135, 0, 175},
    {135, 0, 215},   {135, 0, 255},   {135, 95, 0},    {135, 95, 95},
    {135, 95, 135},  {135, 95, 175},  {135, 95, 215},  {135, 95, 255},
    {135, 135, 0},   {135, 135, 95},  {135, 135, 135}, {135, 135, 175},
    {135, 135, 215}, {135, 135, 255}, {135, 175, 0},   {135, 175, 95},
    {135, 175, 135}, {135, 175, 175}, {135, 175, 215}, {135, 175, 255},
    {135, 215, 0},   {135, 215, 95},  {135, 215, 135}, {135, 215, 175},
    {135, 215, 215}, {135, 215, 255}, {135, 255, 0},   {135, 255, 95},
    {135, 255, 135}, {135, 255, 175}, {135, 255, 215}, {135, 255, 255},
    {175, 0, 0},     {175, 0, 95},    {175, 0, 135},   {175, 0, 175},
    {175, 0, 215},   {175, 0, 255},   {175, 95, 0},    {175, 95, 95},
    {175, 95, 135},  {175, 95, 175},  {175, 95, 215},  {175, 95, 255},
    {175, 135, 0},   {175, 135, 95},  {175, 135, 135}, {175, 135, 175},
    {175, 135, 215}, {175, 135, 255}, {175, 175, 0},   {175, 175, 95},
    {175, 175, 135}, {175, 175, 175}, {175, 175, 215}, {175, 175, 255},
    {175, 215, 0},   {175, 215, 95},  {175, 215, 135}, {175, 215, 175},
    {175, 215, 215}, {175, 215, 255}, {175, 255, 0},   {175, 255, 95},
    {175, 255, 135}, {175, 255, 175}, {175, 255, 215}, {175, 255, 255},
    {215, 0, 0},     {215, 0, 95},    {215, 0, 135},   {215, 0, 175},
    {215, 0, 215},   {215, 0, 255},   {215, 95, 0},    {215, 95, 95},
    {215, 95, 135},  {215, 95, 175},  {215, 95, 215},  {215, 95, 255},
    {215, 135, 0},   {215, 135, 95},  {215, 135, 135}, {215, 135, 175},
    {215, 135, 215}, {215, 135, 255}, {215, 175, 0},   {215, 175, 95},
    {215, 175, 135}, {215, 175, 175}, {215, 175, 215}, {215, 175, 255},
    {215, 215, 0},   {215, 215, 95},  {215, 215, 135}, {215, 215, 175},
    {215, 215, 215}, {215, 215, 255}, {215, 255, 0},   {215, 255, 95},
    {215, 255, 135}, {215, 255, 175}, {215, 255, 215}, {215, 255, 255},
    {255, 0, 0},     {255, 0, 95},    {255, 0, 135},   {255, 0, 175},
    {255, 0, 215},   {255, 0, 255},   {255, 95, 0},    {255, 95, 95},
    {255, 95, 135},  {255, 95, 175},  {255, 95, 215},  {255, 95, 255},
    {255, 135, 0},   {255, 135, 95},  {255, 135, 135}, {255, 135, 175},
    {255, 135, 215}, {255, 135, 255}, {255, 175, 0},   {255, 175, 95},
    {255, 175, 135}, {255, 175, 175}, {255, 175, 215}, {255, 175, 255},
    {255, 215, 0},   {255, 215, 95},  {255, 215, 135}, {255, 215, 175},
    {255, 215, 215}, {255, 215, 255}, {255, 255, 0},   {255, 255, 95},
    {255, 255, 135}, {255, 255, 175}, {255, 255, 215}, {255, 255, 255},
    {8, 8, 8},       {18, 18, 18},    {28, 28, 28},    {38, 38, 38},
    {48, 48, 48},    {58, 58, 58},    {68, 68, 68},    {78, 78, 78},
    {88, 88, 88},    {98, 98, 98},    {108, 108, 108}, {118, 118, 118},
    {128, 128, 128}, {138, 138, 138}, {148, 148, 148}, {158, 158, 158},
    {168, 168, 168}, {178, 178, 178}, {188, 188, 188}, {198, 198, 198},
    {208, 208, 208}, {218, 218, 218}, {228, 228, 228}, {238, 238, 238}};
const int num_xterm_colors = sizeof(xterm_colors) / sizeof(xterm_colors[0]);

static inline int get_closest_xterm_color(int r, int g, int b) {
  int min_dist = 1000000;
  int best_color = 0;
  for (int i = 0; i < num_xterm_colors; i++) {
    int dr = r - xterm_colors[i][0];
    int dg = g - xterm_colors[i][1];
    int db = b - xterm_colors[i][2];
    int dist = dr * dr + dg * dg + db * db;
    if (dist < min_dist) {
      min_dist = dist;
      best_color = i;
    }
  }
  return best_color;
}

#endif // IMG2TXT_H
